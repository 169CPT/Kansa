{"name":"Kansa","tagline":"A Powershell incident response framework","body":"Kansa\r\n=====\r\n\r\nA modular incident response framework in Powershell. \r\n\r\n##What does it do? \r\nIt uses Powershell Remoting to run user contributed, ahem, user contri-  \r\nbuted modules across hosts in an enterprise to collect data for use  \r\nduring incident response, breach hunts, or for building an environmental  \r\nbaseline.\r\n\r\n##How do you use it?\r\nHere's a very simple command line example you can run on your own local  \r\nhost.  \r\n  \r\n1.  After downloading the project and unzipping it, you'll likely need  \r\nto \"unblock\" the ps1 files. The easiest way to do this if you're using  \r\nPowershell v3 or later is to cd to the directory where Kansa resides  \r\nand do:  \r\n```Powershell\r\nls -r *.ps1 | Unblock-File\r\n```\r\nIf you're not running PS v3 or later, Sysinternal's Streams utility can  \r\nbe used to remove the alternate data streams that Powershell uses to  \r\ndetermine if files came from the Internet. Once you've removed those  \r\nADSes, you'll be able to run the scripts without issue.  \r\n  \r\nI've not run into any issues running the downloaded scripts via Windows  \r\nRemote Management / Powershell Remoting through Kansa, so you shouldn't  \r\nhave to do anything if you want to run the scripts via remoting.  \r\n  \r\n2.  Open an elevated Powershell Prompt (Right-click Run As Administrator)  \r\n  \r\n3.  At the command prompt, enter: \r\n```Powershell\r\n.\\kansa.ps1 -Target localhost -ModulePath .\\Modules -Verbose  \r\n```\r\nThe script should start collecting data or you may see an error about  \r\nnot having Windows Remote Management enabled. If so, do a little  \r\nsearching online, it's easy to turn on. Turn it on and try again. When  \r\nit finishes running, you'll have a new Output_timestamp subdirectory,  \r\nwith subdirectories for data collected by each module. You can cd into  \r\nthose subdirectories and checkout the data. There are some analysis  \r\nscripts in the Analysis directory, but many of those won't make sense  \r\non a collection of data from a single host. Kansa was written for  \r\ncollection and analysis of data from dozens, hundreds, thousands, tens  \r\nof thousands of systems.  \r\n\r\n##Running Modules Standalone\r\nKansa modules can be run as standalone utilities outside of the Kansa  \r\nframework. Why might you want to do this? Consider netstat -naob, the  \r\noutput of the command line utility is ugly and doesn't easily lend  \r\nitself to analysis. Running  \r\n```Powershell\r\nModules\\Net\\Get-Netstat.ps1\r\n```\r\nas a standalone script will call netstat -naob, but it will return  \r\nPowershell objects in an easy to read, easy to analyze format. You can  \r\neasily convert its output to CSV, TSV or XML using normal Powershell  \r\ncmdlets. Here's an example:  \r\n```Powershell\r\n.\\Get-Netstat.ps1 | ConvertTo-CSV -Delimiter \"`t\" -NoTypeInformation | % { $_ -replace \"`\"\" } | Set-Content netstat.tsv\r\n```\r\nthe result of the above will be a file called netstat.tsv containing  \r\nunquoted, tab separate values for netstat -naob's ouput.\r\n\r\n##Caveats:\r\nPowershell relies on the Windows API. Your adversary may use subterfuge.*\r\n\r\n* Collectors can be written to bypass the Windows API as well.  \r\nGet-RekallPslist.ps1 for example.\r\n\r\n##Version notes:  \r\nIt's been tested in PSv2 / .NET 2 and\r\nlater and works mostly without issue, PSv2 doesn't support workflows and some collectors\r\ndo use workflows. Trouble is, in PSv2, workflow code throws an error when the scripts are\r\nparsed, before execution begins. The fix, comment out the workflows. :(\r\n\r\nReally, upgrade to PSv3 or later. Be happy.\r\n\r\n##More info:  \r\nhttp://trustedsignal.blogspot.com/search/label/Kansa  \r\nhttp://www.powershellmagazine.com/2014/07/18/kansa-a-powershell-based-incident-response-framework/  \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}